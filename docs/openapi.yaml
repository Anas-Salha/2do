openapi: 3.1.0
info:
  title: 2do API
  version: 0.0.0
  description: API for 2do - an overengineered todo app
servers:
  - url: http://localhost:8080/api/v0
    description: Local dev

paths:
  /todos:
    get:
      summary: List all todos
      operationId: listTodos
      responses:
        "200":
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Create a new todo
      operationId: createTodo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTodo"
      responses:
        "201":
          description: Todo created
          headers:
            Location:
              description: URL of the created todo (base url omitted)
              schema:
                type: string
                format: uri-reference
                example: /todos/1
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /todos/{id}:
    get:
      summary: Get a todo by ID
      operationId: getTodo
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: Todo resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Update a todo (text and completed status)
      operationId: updateTodo
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTodo"
      responses:
        "200":
          description: Updated todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    patch:
      summary: Partially update a todo (text or completed status)
      operationId: patchTodo
      parameters:
        - $ref: "#/components/parameters/ID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchTodo"
      responses:
        "200":
          description: Patched todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "415":
          $ref: "#/components/responses/UnsupportedMediaType"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      summary: Delete a todo
      operationId: deleteTodo
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "204":
          description: Deleted successfully (no content)
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  parameters:
    ID:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 4294967295
      description: The unique identifier of a todo

  schemas:
    Todo:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: Do laundry
        completed:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-09-20T15:00:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-09-20T15:00:00Z
      required: [id, text, completed, created_at, updated_at]

    CreateTodo:
      type: object
      additionalProperties: false
      properties:
        text:
          type: string
          example: Buy groceries
        completed:
          type: boolean
          default: false
          example: false
      required: [text]

    UpdateTodo:
      type: object
      additionalProperties: false
      properties:
        text:
          type: string
          example: Hit the gym
        completed:
          type: boolean
          example: false
      required: [text, completed]

    PatchTodo:
      type: object
      additionalProperties: false
      properties:
        text:
          type: string
          example: Make dinner
        completed:
          type: boolean
          example: false
      minProperties: 1

    Error:
      type: object
      additionalProperties: false
      properties:
        error:
          type: object
          additionalProperties: false
          properties:
            code:
              type: string
              description: Machine-readable error code.
              example: bad_id
            message:
              type: string
              description: Optional human-readable context for the error.
              example: "ID must be an integer"
            timestamp:
              type: string
              format: date-time
              description: RFC3339 timestamp for when the error was generated.
              example: 2025-09-20T15:00:00Z
          required: [code, timestamp]
      required: [error]

  responses:
    BadRequest:
      description: Bad Request (malformed JSON, invalid ID)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            invalidId:
              summary: Non-integer id
              value:
                error:
                  code: bad_id
                  message: "ID must be an integer"
                  timestamp: 2025-09-20T15:00:00Z
            badJson:
              summary: Malformed JSON
              value:
                error:
                  code: bad_json
                  message: "invalid json input"
                  timestamp: 2025-09-20T15:00:00Z

    UnsupportedMediaType:
      description: Content-Type must be application/json
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            wrongContentType:
              value:
                error:
                  code: unsupported_media_type
                  message: "Content-Type must be application/json"
                  timestamp: 2025-09-20T15:00:00Z

    NotFound:
      description: Resource not found by ID
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            todoMissing:
              value:
                error:
                  code: todo_not_found
                  message: "No resource found with ID = 999"
                  timestamp: 2025-09-20T15:00:00Z

    UnprocessableEntity:
      description: Valid JSON but fails schema validation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            missingProperty:
              value:
                error:
                  code: input_invalid
                  message: "Missing required property: text"
                  timestamp: 2025-09-20T15:00:00Z
            unknownProperty:
              value:
                error:
                  code: input_invalid
                  message: "Additional property 'txt' is not allowed"
                  timestamp: 2025-09-20T15:00:00Z

    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            generic:
              value:
                error:
                  code: unexpected
                  message: "An unexpected error occurred"
                  timestamp: 2025-09-20T15:00:00Z
